@import '../../mixin/';


$ns : #{$componentPrefix}-button;
$clns: #{$componentPrefix}-color;  
$typeList: primary, tertiary, primary, info, success, warning, error;
$themeList: ghost, fantasy, empty;
$sizeList: small, middle, large;

@function getClrVar($type) {
  @return var(--#{$clns}-#{$type});
}

@function getClrLignVar($type) {
  @return var(--#{$clns}-#{$type}-lignter);
}

@function getClrDarken($type) {
  @return var(--#{$clns}-#{$type}-darken)
}


.#{$componentPrefix}-button {
  $primary-color: #4338ca;

  //base
  & {
    @include useFlexRCC;
    @include useSizeDft(0);
    @include useBorderBox();
    @include useBorderRadius(3);

    cursor: pointer;
    transition: all .15s;
    user-select: none;
    border: solid 1px;
    outline: none;
    gap: 5px;

    color: initial;
    background-color: var(--ber-color-bg);
    border-color: var(--ber-color-gray);

    &:hover,
    &:focus {
      color: var(--ber-color-primary)
    }

    &:hover {
      border-color: var(--ber-color-primary)
    }
  }


}

@keyframes fade {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.is-loading {
  animation: fade .8s ease-out;
}


@each $type in $typeList {
  .#{$ns}-#{$type} {
    color: var(--ber-color-black);
    background-color: getClrVar($type);

    &:hover,
    &:focus {
      color: initial;
      border-color: getClrLignVar($type);
      background-color: getClrLignVar($type);
    }

    &:active {
      color: initial;
      border-color: getClrDarken($type);
      background-color: getClrDarken($type);
    }
  }
}

@each $type in $typeList {
  .#{$ns}-#{variant}-#{$type} {
    color: getClrVar($type);
  }
}

.#{$ns}-#{ghost} {
  background-color: transparent;
  border-color: transparent;

  &:hover,
  &:focus {
    background-color: var(--ber-color-gray);
  }
  &:active {
    border-color: transparent;
  }

}

@each $size in $sizeList {
  .#{$ns}-#{$size}--icon {
    width: getClrVar($size);
    // transition: all .5s;
  }
}