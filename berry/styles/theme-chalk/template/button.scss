@import '../../mixin/';

$clns: #{$componentPrefix}-color;
$themeList: ghost, fantasy, empty;

@mixin with ($type) {
  &.#{$ns_button}-#{$type} {
    color: getClrVar($type);
    border-color: getClrVar($type);

    &:hover,
    &:focus:not(.is-loading)  {
      color: getClrLignVar($type);
      border-color: getClrLignVar($type);
      background-color: transparent;
    }
    &:active:not(.is-loading) {
      color: getClrDarken($type);
      border-color: getClrDarken($type);
      background-color: transparent;
    }
  }
}

@mixin notAllowedMinin($color,$bg,$br) {
  &,
  &:hover,
  &:focus,
  &:active {
    color: $color!important;
    background-color: $bg!important;
    border-color: $br!important;
  }
  
}

@function getClrVar($type) {
  @return var(--#{$clns}-#{$type});
}

@function getClrLignVar($type) {
  @return var(--#{$clns}-#{$type}-lignter);
}

@function getClrDarken($type) {
  @return var(--#{$clns}-#{$type}-darken);
}

.#{$componentPrefix}-button {

  //base
  & {
    @include useFlexRCC;
    @include useSizeDft(0);
    @include useBorderBox();
    @include useBorderRadius(3);

    cursor: pointer;
    transition: all .15s;
    user-select: none;
    border: solid 1px;
    line-height: 1;
    vertical-align: middle;
    outline: none;
    gap: 5px;

    color: initial;
    border-color: var(--ber-color-gray);

    &:hover,
    &:focus {
      color: var(--ber-color-primary)
    }
    &:hover {
      border-color: var(--ber-color-primary)
    }
  }
  &.is-disabled {
    cursor: not-allowed;
    @include notAllowedMinin(getClrVar('black'), getClrVar('gray'),getClrVar('gray') )
  }

  

  @keyframes fade {
    0% {
      opacity: 0;
    }

    100% {
      opacity: 1;
    }
  }

  .is-loading {
    animation: fade .8s ease-out;
  } 
}

@each $type in $typeList {
  .#{$ns_button}-#{$type} {
    // color: getClrDarken($type);
    color: initial;
    border-color: getClrVar($type);
    background-color: getClrVar($type);

    &:hover,
    &:focus {
      color: var(--ber-color-black);
      border-color: getClrLignVar($type);
      background-color: getClrLignVar($type);
    }
    &:active {
      color: var(--ber-color-black);
      border-color: getClrDarken($type);
      background-color: getClrDarken($type);
    }
 
  }
}

.#{$ns_button}-#{ghost} {
  background-color: transparent;
  @each $type in $typeList {
    @include with ($type);
  }
}

@each $size in $sizeList {
  .#{$ns_button}-#{$size} {
    @include useSizeThat($size)
  }
}

